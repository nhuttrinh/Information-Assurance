Name: Nhut Trinh 
ASU ID: 1215483594

MD5: 3C0hPx
SHA256: yekUL8u
bcrypt: 123456
custom: xjnoc
custom ec: 
-------------------------------------------------------------------
#Part 1: I used hashcat to solve this part as well as the other parts.
Using command line: hashcat64.exe -a 3 -m 0 -w 4 hash.txt -i ?a?a?a?a?a?a --force
where: 
•	-a: The attack mode (3 = Brute force)
•	-m: The hash type on your file (0 = MD5)
•	-w: The workload profile (4 = Nightmare mode)
•	-i: Incremental mode with this mask (6 characters including lowercase/uppercase/number/special)
•	--force: brute force mode

It took me about 45 mins to crack this hash on my personal computer.
This is a reference that I used to crack: https://www.md5online.org/blog/how-to-brute-force-a-password/
-------------------------------------------------------------------
#Part 2: Similar as part 1, I used hashcat to crack this hash.
Using command line: hashcat -a 3 -m 1400 hash.txt -1 ?l?u?d ?1?1?1?1?1?1?1 --force
where:
•	-a: The attack mode (3 = Brute force)
•	-m: The hash type on your file (1400 = SHA256)
•	-1: custom mask (7 characters including lowercase/uppercase/number)
•	--force: brute force mode

It took me about 21 mins to crack this hash on google colab.
-------------------------------------------------------------------
#Part 3: Again I used hashcat to crack this hash along with the online common password file rockyou.txt
Using command line: hashcat64.exe -a 0 -m 3200 hash.txt rockyou.txt --force
where:
•	-a: The attack mode (0 = Straight)
•	-m: The hash type on your file (3200 = bcrypt)
•	--force: brute force mode

Here is a reference for rockyou.txt: https://www.kaggle.com/wjburns/common-password-list-rockyoutxt
It took me about 7 mins to crack this hash on my personal computer.
-------------------------------------------------------------------
#Part 4: I used python to crack this hash.
I have four different methods and a main class.
•	def md5_100(password): create a net MD5 hash 100 times and return the 100th hash.
•	def sha256_100(password): create a net SHA256 hash 100 times and return the 100th hash.
•	def sha512_100(password): create a net SHA512 hash 100 times and return the 100th hash.
•	def creat_set(): Create a set of all posible combinations of 5 charactor of lower-case letters, and save them to a file called charSet.txt

In main class, the program first open the charSet.txt file, loop through the file and pass each combination to the 3 hash functions,
then compare if the result matches the given hash. If it matches, break the loop and print out the password.

It took me about 45 mins to loop through the charSet.txt to crack this hash.
I ran twice the code to crack the hash.
The first time I loop thru all the combination but I did not get any "crack" result.
I then figured out that when reading the input file, it also read the newline character, so the hashes did not match.
I added the .strip() to get rid of the newline character, then it worked!!!

Here is the python code:
########################################################################
import hashlib
import itertools
import string

def md5_100(password):
    hashedPassword = hashlib.md5(password.encode())
    hashStore = [hashedPassword]
    for _ in range(1, 100):
        reHash = hashlib.md5(hashStore[-1].hexdigest().encode('utf-8'))
        hashStore.append(reHash)
    return hashStore[99].hexdigest()

def sha256_100(password):
    hashedPassword = hashlib.sha256(password.encode())
    hashStore = [hashedPassword]
    for _ in range(1, 100):
        reHash = hashlib.sha256(hashStore[-1].hexdigest().encode('utf-8'))
        hashStore.append(reHash)
    return hashStore[99].hexdigest()

def sha512_100(password):
    hashedPassword = hashlib.sha512(password.encode())
    hashStore = [hashedPassword]
    for _ in range(1, 100):
        reHash = hashlib.sha512(hashStore[-1].hexdigest().encode('utf-8'))
        hashStore.append(reHash)
    return hashStore[99].hexdigest()

def creat_set():
    text_file = open("charSet.txt", "w")
    charset = string.ascii_lowercase
    result = itertools.product(charset, repeat=5)
    result_list = [*result]
    final_list = [""] * 11881376
    for i in range(0, 11881376):
        chars = ""
        for j in range(0, 5):
            chars = chars + result_list[i][j]
        final_list[i] = chars

    for line in final_list:
        text_file.write(line)
        text_file.write("\n")
    text_file.close()

f = open("charSet.txt","r")
deshash = "f032601da1955ec89ca006d349a044c315c8cf02a6c5f0dae7a652e28d8d2e47546f2ef12a977cf55c0dc8fe8981641ffbe632a9fad2f3913fb324f95d7cc618"
pw = ""
for x in f:
    pw = x.strip()
    hashpwmd5 = md5_100(pw)
    hashsha256 = sha256_100(hashpwmd5)
    hsha512 = sha512_100(hashsha256)
    if(hsha512 == deshash):
        print("Crack!")
        print(pw)
        break
f.close()

########################################################################

Reference for this part:
https://stackoverflow.com/questions/46496202/all-2-character-a-z-0-9-combinations-python
https://stackoverflow.com/questions/56444486/how-to-hash-an-already-hashed-value-for-a-given-range


